#!/bin/sh
#
# scalarizr - this script starts and stops the scalarizr daemon
#
# chkconfig:   - 85 15
# description:  Scalarizr is a part of Scalr project
# processname: scalarizr
# config:      /etc/scalr/config.ini
# config:      /etc/sysconfig/scalarizr
# pidfile:     /var/run/scalarizr.pid
### BEGIN INIT INFO
# Provides:          scalarizr
# Required-Start:    $network $local_fs
# Required-Stop:     $network $local_fs
# Should-Start:      $named
# Default-Start:     0
# Default-Stop:      0 1 6
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

killproc() {
        local RC killlevel= base pid pid_file= delay

        RC=0; delay=3
        # Test syntax.
        if [ "$#" -eq 0 ]; then
                echo $"Usage: killproc [-p pidfile] [ -d delay] {program} [-signal]"
                return 1
        fi
        if [ "$1" = "-p" ]; then
                pid_file=$2
                shift 2
        fi
        if [ "$1" = "-d" ]; then
                delay=$2
                shift 2
        fi


        # check for second arg to be kill level
        [ -n "${2:-}" ] && killlevel=$2

        # Save basename.
        base=${1##*/}

        # Find pid.
        __pids_var_run "$1" "$pid_file"
        if [ -z "$pid_file" -a -z "$pid" ]; then
                pid="$(__pids_pidof "$1")"
        fi

        # Kill it.
        if [ -n "$pid" ] ; then
                [ "$BOOTUP" = "verbose" -a -z "${LSB:-}" ] && echo -n "$base "
                if [ -z "$killlevel" ] ; then
                       if checkpid $pid 2>&1; then
                           # TERM first, then KILL if not dead
                           kill -TERM $pid
                           usleep 100000
                           if checkpid $pid && sleep 2 && 
                              checkpid $pid && sleep $delay &&
                              checkpid $pid ; then
                                kill -KILL $pid >/dev/null 2>&1
                                usleep 100000
                           fi
                        fi
                        checkpid $pid
                        RC=$?
                        [ "$RC" -eq 0 ] && failure $"$base shutdown" || success $"$base shutdown"
                        RC=$((! $RC))
                # use specified level only
                else
                        if checkpid $pid; then
                                kill $killlevel $pid >/dev/null 2>&1
                                RC=$?
                                [ "$RC" -eq 0 ] && success $"$base $killlevel" || failure $"$base $killlevel"
                        elif [ -n "${LSB:-}" ]; then
                                RC=7 # Program is not running
                        fi
                fi
        else
                if [ -n "${LSB:-}" -a -n "$killlevel" ]; then
                        RC=7 # Program is not running
                else
                        failure $"$base shutdown"
                        RC=0
                fi
        fi

        # Remove pid file if any.
        if [ -z "$killlevel" ]; then
            rm -f "${pid_file:-/var/run/$base.pid}"
        fi
        return $RC
}



# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0

scalarizr="/usr/bin/scalarizr"
prog=$(basename $scalarizr)

SCALARIZR_CONF_DIR="/etc/scalr"
SCALARIZR_CONF_FILE="$SCALARIZR_CONF_DIR/public.d/config.ini"
PYTHON='/usr/bin/python2.6'

[ -f /etc/sysconfig/scalarizr ] && . /etc/sysconfig/scalarizr

lockfile=/var/lock/subsys/scalarizr
scripts_path=$(cat $SCALARIZR_CONF_FILE | grep "scripts_path" | awk '{print $3}')
run_level=$(who -r | awk '{print $2}')

start() {
    [ -x $scalarizr ] || exit 5
    [ -f $SCALARIZR_CONF_FILE ] || exit 6
    echo -n $"Starting $prog: "
    daemon $scalarizr -z -c $SCALARIZR_CONF_DIR
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
	if [ $run_level == "0" ]; then
		$PYTHON $scripts_path/halt stop
	elif [ $run_level == "6" ]; then
		$PYTHON $scripts_path/reboot stop
	fi    
    killproc -d 3 $prog
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile

	__zomby_pids=$(ps aux | grep 'bin/scalarizr' | awk '{ print $2 }')
	if [ "$__zomby_pids" ]; then
		for __zomby_pid in $__zomby_pids; do
			kill -9 $__zomby_pid 2>/dev/null || :
		done
	fi

    return $retval
}

restart() {
    stop
    start
}


rh_status() {
    status $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    force-reload|upgrade) 
        rh_status_q || exit 7
        upgrade
        ;;
    status|status_q)
        rh_$1
        ;;
    condrestart|try-restart)
        rh_status_q || exit 7
        restart
	    ;;
    *)
        echo $"Usage: $0 {start|stop|status|force-reload|restart}"
        exit 2
esac
