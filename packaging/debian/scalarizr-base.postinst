#!/bin/bash

set -x

# Automatically added by dh_pysupport
if which update-python-modules >/dev/null 2>&1; then
	if test -f /usr/share/python-support/scalarizr-base.public; then
		#if dpkg --compare-versions "$2" lt '0.10.0'; then
		#	rm -rf /usr/lib/pymodules/python2.*/scalarizr
		#fi
		update-python-modules --post-install /usr/share/python-support/scalarizr-base.public
	else
		update-python-modules scalarizr-base
	fi
fi

# End automatically added section


if [ "$1" == "configure" ]; then

cp /usr/share/scalr/szradm.bash_completion /etc/bash_completion.d/szradm

# Create configuration files
pub_cnf_dir='/etc/scalr/public.d'
priv_cnf_dir='/etc/scalr/private.d'


if [ ! -f "$pub_cnf_dir/config.ini" ]; then
	echo 'Creating configuration files...'
	cat <<EOF > "$pub_cnf_dir/config.ini"
[general]

; Server behaviour is a role your server acts as.
; Built-in behaviours:
; 	www - Load balancer
;	app - Application server
; 	mysql - Database server
behaviour =

; Path to the local sqlite database
storage_path = private.d/db.sqlite3

; Path to the Scalarizr crypto key
crypto_key_path = private.d/keys/default

; Cloud platform on which Scalarizr is deployed.
; Built-in platforms:
; 	ec2 - Amazon EC2
platform = ec2

; Scalarizr scripts path
scripts_path = /usr/local/scalarizr/scripts

; Email for system info reports
report_email = szr-report@scalr.com

[messaging]
; Messaging implementation adapter. Built-in adapters: p2p
adapter = p2p

[messaging_p2p]
; Retires progression
producer_retries_progression = 1,2,5,10,20,30,60

; Local messaging endpoint. Will be used by Scalr to send messages to.
consumer_url = http://0.0.0.0:8013


[snmp]

; SNMP listen port
port = 8014


[handlers]

; Life circle
; @required
; Server life cycle in a Scalr environment
lifecycle = scalarizr.handlers.lifecycle

; IP list builder
; @optional
; Builds farm servers IP addresses structure
; @see http://article-about-etc-aws-hosts structure
ip_list_builder = scalarizr.handlers.ip_list_builder

; Scalr scripting
; @optional
; Executes user defined scripts on Scalr and Scalarizr events
; @see http://article-about-scripting
script_executor = scalarizr.handlers.script_executor

; Hooks
; @optional
; @requires scalarizr.handlers.script_executor
; Executes scripts on scalarizr events in a POSIX manner. Scripts are located in `hooks` directory,
; must be named exactly as a Scalarizr event with a numeric prefix which defines the execution order,
; and must have #! in a first line.
; Example:
; $ ls /usr/local/scalarizr/hooks
; 01-host_init 01-host_up  02-host_up
hooks = scalarizr.handlers.hooks

; SSH authorized keys manager
ssh_auth_keys = scalarizr.handlers.ssh_auth_keys

; Deployments
; @optional
deploy = scalarizr.handlers.deploy

EOF
fi

if [ ! -f "$pub_cnf_dir/app.ini" ]; then
	cat <<EOF > "$pub_cnf_dir/app.ini"
[app]

; Directory to create virtual hosts configuration in.
; All Apache virtual hosts, created in the Scalr user interface are placed in a separate
; directory and included to the main Apache configuration file.
vhosts_path =

; Apache configuration file location.
apache_conf_path =

; DO NOT MODIFY!
; app behaviour implementation
main_handler = apache

[handlers]
apache = scalarizr.handlers.apache
EOF
fi

if [ ! -f "$pub_cnf_dir/chef.ini" ]; then
	cat <<EOF > "$pub_cnf_dir/chef.ini"
; Opscode Chef integration

[chef]


[handlers]

chef = scalarizr.handlers.chef
EOF
fi


if [ ! -f "$pub_cnf_dir/cloudstack.ini" ]; then
	cat <<EOF > "$pub_cnf_dir/cloudstack.ini"
[cloudstack]

[handlers]

cloudstack_lifecycle = scalarizr.handlers.cloudstack.lifecycle

cloudstack_rebundle = scalarizr.handlers.cloudstack.rebundle

cloudstack_csvol = scalarizr.handlers.cloudstack.csvol
EOF
fi



if [ ! -f "$pub_cnf_dir/ec2.ini" ]; then
	cat <<EOF > "$pub_cnf_dir/ec2.ini"
[ec2]

; Amazon EC2 certificate path
ec2_cert_path = public.d/keys/ec2_cert.pem

; Your Amazon EC2 certificate path
cert_path = private.d/keys/ec2_cert.pem

; Your Amazon EC2 private key path
pk_path = private.d/keys/ec2_pk.pem

; Set hostname to the public DNS name of instance
hostname_as_pubdns = 1

[handlers]
; Life cycle in the EC2 environment
; @required
; Additional life cycle features for the EC2 cloud platform
ec2_lifecycle = scalarizr.handlers.ec2.lifecycle

; Image bundle
; @required
; Create an instance image bundle and upload it to S3.
rebundle = scalarizr.handlers.ec2.rebundle

; EBS management
; @required
; EBS attach/detach operations handler.
ebs = scalarizr.handlers.ec2.ebs
EOF
fi

if [ ! -f "$pub_cnf_dir/gce.ini" ]; then
	cat <<EOF > "$pub_cnf_dir/gce.ini"
[gce]

[handlers]

rebundle = scalarizr.handlers.gce.rebundle

gce_lifecycle = scalarizr.handlers.gce.lifecycle

gce_vol = scalarizr.handlers.gce.vol
EOF
fi

if [ ! -f "$pub_cnf_dir/haproxy.ini" ]; then
	cat <<EOF > "$pub_cnf_dir/haproxy.ini"
[haproxy]

[handlers]
haproxy = scalarizr.handlers.haproxy
EOF
fi

if [ ! -f "$pub_cnf_dir/hooks.ini" ]; then
	cat <<EOF > "$pub_cnf_dir/hooks.ini"
[hooks]

hooks_path = /usr/local/scalarizr/hooks
EOF
fi

if [ ! -f "$pub_cnf_dir/ip_list_builder.ini" ]; then
        cat <<EOF > "$pub_cnf_dir/ip_list_builder.ini"
[ip_list_builder]
base_path=$priv_cnf_dir/hosts
EOF
fi

if [ ! -f "$pub_cnf_dir/memcached.ini" ]; then
        cat <<EOF > "$pub_cnf_dir/memcached.ini"
[memcached]

; Cache size in megabytes
cache_size = 1536

main_handler = memcached

[handlers]

memcached=scalarizr.handlers.memcached
EOF
fi


if [ ! -f "$pub_cnf_dir/mysql2.ini" ]; then
        cat <<EOF > "$pub_cnf_dir/mysql2.ini"
[mysql2]

; Timeout for change master host (on slave)
change_master_timeout = 30

mysqldump_options = --create-options --routines --add-drop-database --quick --quote-names --flush-privileges

main_handler = mysql2


[handlers]

mysql2 = scalarizr.handlers.mysql2
EOF
fi



if [ ! -f "$pub_cnf_dir/mysqlproxy.ini" ]; then
        cat <<EOF > "$pub_cnf_dir/mysqlproxy.ini"
[mysqlproxy]

[handlers]

mysqlproxy = scalarizr.handlers.mysqlproxy
EOF
fi


if [ ! -f "$pub_cnf_dir/router.ini" ]; then
        cat <<EOF > "$pub_cnf_dir/router.ini"
[router]

[handlers]

router = scalarizr.handlers.router
EOF
fi


cat <<EOF > "$pub_cnf_dir/openstack.ini"
[openstack]

[handlers]

openstack_vol = scalarizr.handlers.openstack.vol
openstack_rebundle = scalarizr.handlers.openstack.rebundle
EOF


if [ ! -f "$pub_cnf_dir/postgresql.ini" ]; then
        cat <<EOF > "$pub_cnf_dir/postgresql.ini"
[postgresql]

; Timeout for change master host (on slave)
change_master_timeout = 30

[handlers]

postgresql = scalarizr.handlers.postgresql
EOF
fi

if [ ! -f "$pub_cnf_dir/rabbitmq.ini" ]; then
        cat <<EOF > "$pub_cnf_dir/rabbitmq.ini"
[rabbitmq]

[handlers]

rabbitmq = scalarizr.handlers.rabbitmq
EOF
fi


if [ ! -f "$pub_cnf_dir/redis.ini" ]; then
        cat <<EOF > "$pub_cnf_dir/redis.ini"
[redis]

; Timeout for change master host (on slave)
change_master_timeout = 30

[handlers]

redis = scalarizr.handlers.redis
EOF
fi


if [ ! -f "$pub_cnf_dir/script_executor.ini" ]; then
        cat <<EOF > "$pub_cnf_dir/script_executor.ini"
[script_executor]

exec_dir_prefix=/usr/local/bin/scalr-scripting.

logs_dir=/var/log/scalarizr/scripting

logs_truncate_over=20K
EOF
fi

if [ ! -f "$pub_cnf_dir/tomcat.ini" ]; then
	cat <<EOF > "$pub_cnf_dir/tomcat.ini"
[tomcat]

[handlers]

tomcat = scalarizr.handlers.tomcat
EOF
fi

if [ ! -f "$pub_cnf_dir/www.ini" ]; then
	cat <<EOF > "$pub_cnf_dir/www.ini"
[www]

; Path to nginx binary
binary_path = /usr/sbin/nginx

; App upstreams configuration file path.
app_include_path = /etc/nginx/app-servers.include

; HTTPS configuration file path
https_include_path = /etc/nginx/https.include

; Application server http port
app_port = 80

; DO NOT MODIFY!
main_handler = nginx

; Proxy http trafic to single app role
upstream_app_role =

[handlers]

nginx = scalarizr.handlers.nginx
EOF
fi


pushd .
cd $pub_cnf_dir
[ ! -f percona.ini ] && ln -s mysql2.ini percona.ini
[ ! -f mariadb.ini ] && ln -s mysql2.ini mariadb.ini
[ ! -f idcf.ini ] && ln -s cloudstack.ini idcf.ini
[ ! -f ucloud.ini ] && ln -s cloudstack.ini ucloud.ini
popd




#installed_version=$(echo $(dpkg-query -f '${Version}\n' --show {scalarizr,scalarizr-base}) | tail -1)

installed_version="$2"
if [ -z $installed_version ] && [ -f /tmp/szr-obsolete-version ]; then
	installed_version=$(cat /tmp/szr-obsolete-version)
	rm -f /tmp/szr-obsolete-version
fi

if [ -n "$installed_version" ]; then
	if dpkg --compare-versions "$installed_version" lt '0.9.r3746-1'; then
		[ ! -f "$pub_cnf_dir/percona.ini" ] && ln -s "$pub_cnf_dir/mysql2.ini" "$pub_cnf_dir/percona.ini"
	fi

	if dpkg --compare-versions "$installed_version" lt '0.9.r4762-1'; then
		dbfile="$priv_cnf_dir/db.sqlite"
		if [ -e "$dbfile" ]; then
			python - <<-EOF
				import sqlite3
				import os
				conn = sqlite3.Connection('${dbfile}')
				cur = conn.cursor()
				cur.execute('pragma table_info(p2p_message)')
				if not any(filter(lambda row: row[1] == 'format', cur.fetchall())):
				    cur.execute("alter table p2p_message add column format TEXT default 'xml'")
				    conn.commit()
				cur.close()
			EOF
		fi
	fi

	if dpkg --compare-versions "$installed_version" lt '2.7.18'; then
		if [ -f "$priv_cnf_dir/.state" ] && [ $(cat "$priv_cnf_dir/.state") = 'running' ]; then
			python -m scalarizr.updclient.app --make-status-file  --downgrades-disabled
		fi
	fi
fi

chown -R root:root /etc/scalr
chmod 755 /etc/scalr
chmod 775 /etc/scalr/private.d
sync

rm -f /usr/local/bin/szradm
if [ ! -d /usr/local/bin ]; then
	mkdir -p /usr/local/bin
	chmod 755 /usr/local/bin
fi
ln -s /usr/bin/szradm /usr/local/bin/szradm

fi


NAME="scalarizr"
INIT_SCRIPT="/etc/init.d/$NAME"



if [ -x $INIT_SCRIPT ]; then
	if which insserv > /dev/null && test -e /etc/issue.net && ! grep -q 'Ubuntu' /etc/issue.net; then
		insserv -r scalarizr_update || :
		rm -f /etc/init.d/scalarizr_update
		insserv -r $NAME
		insserv $NAME
		insserv scalr-upd-client
	else
		rm -f /etc/init.d/scalarizr_update
		update-rc.d scalarizr_update remove || :
		update-rc.d -f $NAME remove || :
		if test -e /etc/issue.net && grep -q '10.04' /etc/issue.net; then
			# We've reverted back scalarizr autostart because
			# some clients have scalarizr bundled without scalr-upd-client,
			# and Ubuntu 10.04 init doesn't execute new init scripts,
			# that was installed during init
			update-rc.d $NAME defaults 99 >/dev/null
		else
			update-rc.d scalarizr stop 99 0 1 6 .
		fi
		update-rc.d scalr-upd-client defaults 98 >/dev/null
	fi

	zomby_pids=$(ps aux | grep 'bin/scalarizr' | awk '{ print $2 }')
	if [ "$zomby_pids" ]; then
		for zomby_pid in $zomby_pids; do
			kill -9 $zomby_pid 2>/dev/null
		done
	fi

	if [ -f "/tmp/$NAME.status" ]; then
		status=$(cat /tmp/$NAME.status)
		rm -f "/tmp/$NAME.status"
		if [ "0" = "$status" ]; then
			$INIT_SCRIPT start || exit $?
		fi
	else
		if [ -f "/etc/scalr/private.d/.state" ]; then
			$INIT_SCRIPT start || exit $?
		fi
	fi
fi